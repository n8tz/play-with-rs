{"version":3,"file":"polyfills.promise.js","sources":["webpack:///./src/js/polyfills/promise.js"],"sourcesContent":["define(['utils/underscore'], function(_) {\r\n    // https://github.com/taylorhakes/promise-polyfill\r\n    // v2.1.0\r\n\r\n    // Use polyfill for setImmediate for performance gains\r\n    var asap = _.defer;\r\n    var isArray = _.isArray;\r\n\r\n    function Promise(fn) {\r\n        if (typeof this !== 'object') throw new TypeError('Promises must be constructed via new');\r\n        if (typeof fn !== 'function') throw new TypeError('not a function');\r\n        this._state = null;\r\n        this._value = null;\r\n        this._deferreds = []\r\n\r\n        doResolve(fn, bind(resolve, this), bind(reject, this))\r\n    }\r\n\r\n    function handle(deferred) {\r\n        var me = this;\r\n        if (this._state === null) {\r\n            this._deferreds.push(deferred);\r\n            return\r\n        }\r\n        asap(function () {\r\n            var cb = me._state ? deferred.onFulfilled : deferred.onRejected\r\n            if (cb === null) {\r\n                (me._state ? deferred.resolve : deferred.reject)(me._value);\r\n                return;\r\n            }\r\n            var ret;\r\n            try {\r\n                ret = cb(me._value);\r\n            }\r\n            catch (e) {\r\n                deferred.reject(e);\r\n                return;\r\n            }\r\n            deferred.resolve(ret);\r\n        })\r\n    }\r\n\r\n    function resolve(newValue) {\r\n        try { //Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\r\n            if (newValue === this) throw new TypeError('A promise cannot be resolved with itself.');\r\n            if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {\r\n                var then = newValue.then;\r\n                if (typeof then === 'function') {\r\n                    doResolve(bind(then, newValue), bind(resolve, this), bind(reject, this));\r\n                    return;\r\n                }\r\n            }\r\n            this._state = true;\r\n            this._value = newValue;\r\n            finale.call(this);\r\n        } catch (e) {\r\n            reject.call(this, e);\r\n        }\r\n    }\r\n\r\n    function reject(newValue) {\r\n        this._state = false;\r\n        this._value = newValue;\r\n        finale.call(this);\r\n    }\r\n\r\n    function finale() {\r\n        for (var i = 0, len = this._deferreds.length; i < len; i++) {\r\n            handle.call(this, this._deferreds[i]);\r\n        }\r\n        this._deferreds = null;\r\n    }\r\n\r\n    function Handler(onFulfilled, onRejected, resolve, reject) {\r\n        this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\r\n        this.onRejected = typeof onRejected === 'function' ? onRejected : null;\r\n        this.resolve = resolve;\r\n        this.reject = reject;\r\n    }\r\n\r\n    function doResolve(fn, onFulfilled, onRejected) {\r\n        var done = false;\r\n        try {\r\n            fn(function (value) {\r\n                if (done) return;\r\n                done = true;\r\n                onFulfilled(value);\r\n            }, function (reason) {\r\n                if (done) return;\r\n                done = true;\r\n                onRejected(reason);\r\n            })\r\n        } catch (ex) {\r\n            if (done) return;\r\n            done = true;\r\n            onRejected(ex);\r\n        }\r\n    }\r\n\r\n    Promise.prototype['catch'] = function (onRejected) {\r\n        return this.then(null, onRejected);\r\n    };\r\n\r\n    Promise.prototype.then = function (onFulfilled, onRejected) {\r\n        var me = this;\r\n        return new Promise(function (resolve, reject) {\r\n            handle.call(me, new Handler(onFulfilled, onRejected, resolve, reject));\r\n        })\r\n    };\r\n\r\n    Promise.all = function () {\r\n        var args = Array.prototype.slice.call(arguments.length === 1 && isArray(arguments[0]) ? arguments[0] : arguments);\r\n\r\n        return new Promise(function (resolve, reject) {\r\n            if (args.length === 0) return resolve([]);\r\n            var remaining = args.length;\r\n\r\n            function res(i, val) {\r\n                try {\r\n                    if (val && (typeof val === 'object' || typeof val === 'function')) {\r\n                        var then = val.then;\r\n                        if (typeof then === 'function') {\r\n                            then.call(val, function (val) {\r\n                                res(i, val)\r\n                            }, reject);\r\n                            return;\r\n                        }\r\n                    }\r\n                    args[i] = val;\r\n                    if (--remaining === 0) {\r\n                        resolve(args);\r\n                    }\r\n                } catch (ex) {\r\n                    reject(ex);\r\n                }\r\n            }\r\n\r\n            for (var i = 0; i < args.length; i++) {\r\n                res(i, args[i]);\r\n            }\r\n        });\r\n    };\r\n\r\n    Promise.resolve = function (value) {\r\n        if (value && typeof value === 'object' && value.constructor === Promise) {\r\n            return value;\r\n        }\r\n\r\n        return new Promise(function (resolve) {\r\n            resolve(value);\r\n        });\r\n    };\r\n\r\n    Promise.reject = function (value) {\r\n        return new Promise(function (resolve, reject) {\r\n            reject(value);\r\n        });\r\n    };\r\n\r\n    Promise.race = function (values) {\r\n        return new Promise(function (resolve, reject) {\r\n            for (var i = 0, len = values.length; i < len; i++) {\r\n                values[i].then(resolve, reject);\r\n            }\r\n        });\r\n    };\r\n\r\n    Promise._setImmediateFn = function _setImmediateFn(fn) {\r\n        asap = fn;\r\n    };\r\n\r\n    window.Promise = Promise;\r\n\r\n});\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/js/polyfills/promise.js\n ** module id = 95\n ** module chunks = 1\n **/"],"mappingssourceRoot":""}
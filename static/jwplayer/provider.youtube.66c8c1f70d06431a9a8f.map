{"version":3,"file":"provider.youtube.js","sources":["webpack:///./src/js/providers/youtube.js"],"sourcesContent":["define([\r\n    'utils/helpers',\r\n    'utils/css',\r\n    'utils/stretching',\r\n    'utils/underscore',\r\n    'events/events',\r\n    'events/states',\r\n    'utils/scriptloader',\r\n    'providers/default',\r\n    'utils/backbone.events'\r\n], function(utils, cssUtils, stretchUtils, _, events, states, scriptloader, DefaultProvider, Events) {\r\n    var _scriptLoader = new scriptloader(window.location.protocol + '//www.youtube.com/iframe_api'),\r\n        _isMobile = utils.isMobile();\r\n\r\n    function YoutubeProvider(_playerId, _playerConfig) {\r\n        this.state = states.IDLE;\r\n\r\n        _.extend(this, Events);\r\n\r\n        var _this = this,\r\n        // Youtube API and Player Instance\r\n            _youtubeAPI = window.YT,\r\n            _youtubePlayer = null,\r\n            // iFrame Container (this element will be replaced by iFrame element)\r\n            _element = document.createElement('div'),\r\n            // view container\r\n            _container,\r\n            // player state\r\n            _bufferPercent = -1,\r\n            // only add player ready listener once\r\n            _listeningForReady = false,\r\n            // function to call once api and view are ready\r\n            _youtubeEmbedReadyCallback = null,\r\n            // function to call once _ytPlayer api is ready\r\n            _youtubePlayerReadyCallback = null,\r\n            // update timer\r\n            _playingInterval = -1,\r\n            // current Youtube state, tracked because state events fail to fire\r\n            _youtubeState = -1,\r\n            // post roll support\r\n            _beforecompleted = false,\r\n            // user must click video to initiate playback, gets set to false once playback starts\r\n            _requiresUserInteraction = _isMobile;\r\n\r\n        this.setState = function(state) {\r\n            clearInterval(_playingInterval);\r\n            if (state !== states.IDLE && state !== states.COMPLETE) {\r\n                // always run this interval when not idle because we can't trust events from iFrame\r\n                _playingInterval = setInterval(_checkPlaybackHandler, 250);\r\n                if (state === states.PLAYING) {\r\n                    this.seeking = false;\r\n                } else if (state === states.LOADING || state === states.STALLED) {\r\n                    _bufferUpdate();\r\n                }\r\n            }\r\n\r\n            DefaultProvider.setState.apply(this, arguments);\r\n        };\r\n\r\n        // Load iFrame API\r\n        if (!_youtubeAPI && _scriptLoader && _scriptLoader.getStatus() === scriptloader.loaderstatus.NEW) {\r\n            _scriptLoader.on(events.COMPLETE, _onLoadSuccess);\r\n            _scriptLoader.on(events.ERROR, _onLoadError);\r\n            _scriptLoader.load();\r\n        }\r\n\r\n        // setup container\r\n        _element.id = _playerId + '_youtube';\r\n\r\n        function _onLoadSuccess() {\r\n            if (window.YT && window.YT.loaded) {\r\n                _youtubeAPI = window.YT;\r\n                _readyCheck();\r\n            } else {\r\n                // poll until Yo API is loaded\r\n                setTimeout(_onLoadSuccess, 100);\r\n            }\r\n        }\r\n\r\n        function _onLoadError() {\r\n            if (_scriptLoader) {\r\n                _scriptLoader.off();\r\n                _scriptLoader = null;\r\n                // console.log('Error loading Youtube iFrame API: %o', event);\r\n                // TODO: dispatch video error\r\n            }\r\n        }\r\n\r\n        function _getVideoLayer() {\r\n            var videoLayer = _element && _element.parentNode;\r\n            if (!videoLayer) {\r\n                // if jwplayer DOM is not ready, do Youtube embed on jwplayer ready\r\n                if (!_listeningForReady) {\r\n                    window.jwplayer(_playerId).onReady(_readyCheck);\r\n                    _listeningForReady = true;\r\n                }\r\n                return false;\r\n            }\r\n            return videoLayer;\r\n        }\r\n\r\n        function _readyCheck() {\r\n            if (_youtubeAPI && _getVideoLayer()) {\r\n                // if setItem cued up a video, this callback will handle it now\r\n                if (_youtubeEmbedReadyCallback) {\r\n                    _youtubeEmbedReadyCallback.apply(_this);\r\n                }\r\n            }\r\n        }\r\n\r\n        function _checkPlaybackHandler() {\r\n            // return if player is not initialized and ready\r\n            if (!_youtubePlayer || !_youtubePlayer.getPlayerState) {\r\n                return;\r\n            }\r\n            // manually check for state changes since API fails to do so\r\n            var youtubeState = _youtubePlayer.getPlayerState();\r\n            if (youtubeState !== null &&\r\n                youtubeState !== undefined &&\r\n                youtubeState !== _youtubeState) {\r\n                _onYoutubeStateChange({\r\n                    data: youtubeState\r\n                });\r\n            }\r\n            // handle time and buffer updates\r\n            var youtubeStates = _youtubeAPI.PlayerState;\r\n            if (youtubeState === youtubeStates.PLAYING) {\r\n                _timeUpdateHandler();\r\n            } else if (youtubeState === youtubeStates.BUFFERING) {\r\n                _bufferUpdate();\r\n            }\r\n        }\r\n\r\n\r\n        function _round(number) {\r\n            return Math.round(number*10)/10;\r\n        }\r\n        function _timeUpdateHandler() {\r\n            _bufferUpdate();\r\n            _this.trigger(events.JWPLAYER_MEDIA_TIME, {\r\n                position: _round(_youtubePlayer.getCurrentTime()),\r\n                duration: _youtubePlayer.getDuration()\r\n            });\r\n        }\r\n\r\n        function _bufferUpdate() {\r\n            var bufferPercent = 0;\r\n            if (_youtubePlayer && _youtubePlayer.getVideoLoadedFraction) {\r\n                bufferPercent = Math.round(_youtubePlayer.getVideoLoadedFraction() * 100);\r\n            }\r\n            if (_bufferPercent !== bufferPercent) {\r\n                _bufferPercent = bufferPercent;\r\n                _this.trigger(events.JWPLAYER_MEDIA_BUFFER, {\r\n                    bufferPercent: bufferPercent\r\n                });\r\n                //if (bufferPercent === 100) this.trigger(events.JWPLAYER_MEDIA_BUFFER_FULL);\r\n            }\r\n        }\r\n\r\n        function _ended() {\r\n            if (_this.state !== states.IDLE && _this.state !== states.COMPLETE) {\r\n                _beforecompleted = true;\r\n                _this.trigger(events.JWPLAYER_MEDIA_BEFORECOMPLETE);\r\n                _this.setState(states.COMPLETE);\r\n                _beforecompleted = false;\r\n                _this.trigger(events.JWPLAYER_MEDIA_COMPLETE);\r\n            }\r\n        }\r\n\r\n        function _sendMetaEvent() {\r\n            _this.trigger(events.JWPLAYER_MEDIA_META, {\r\n                duration: _youtubePlayer.getDuration(),\r\n                width: _element.clientWidth,\r\n                height: _element.clientHeight\r\n            });\r\n        }\r\n\r\n        // Returns a function that is the composition of a list of functions, each\r\n        // consuming the return value of the function that follows.\r\n        function _composeCallbacks() {\r\n            var args = arguments;\r\n            var start = args.length - 1;\r\n            return function() {\r\n                var i = start;\r\n                var result = args[start].apply(this, arguments);\r\n                while (i--) { result = args[i].call(this, result); }\r\n                return result;\r\n            };\r\n        }\r\n\r\n        function _embedYoutubePlayer(videoId, playerVars) {\r\n            if (!videoId) {\r\n                throw 'invalid Youtube ID';\r\n            }\r\n\r\n            var videoLayer = _element.parentNode;\r\n            if (!videoLayer) {\r\n                // setContainer() hasn't been run yet\r\n                return;\r\n            }\r\n\r\n            var ytConfig = {\r\n                height: '100%',\r\n                width: '100%',\r\n                videoId: videoId,\r\n                playerVars: _.extend({\r\n                    html5: 1,\r\n                    autoplay: 0,\r\n                    controls: 0,\r\n                    showinfo: 0,\r\n                    rel: 0,\r\n                    modestbranding: 0,\r\n                    playsinline: 1,\r\n                    origin: location.protocol + '//' + location.hostname\r\n                }, playerVars),\r\n                events: {\r\n                    onReady: _onYoutubePlayerReady,\r\n                    onStateChange: _onYoutubeStateChange,\r\n                    onPlaybackQualityChange: _onYoutubePlaybackQualityChange,\r\n                    // onPlaybackRateChange: _onYoutubePlaybackRateChange,\r\n                    onError: _onYoutubePlayerError\r\n                }\r\n            };\r\n\r\n            // iFrame must be visible or it will not set up properly\r\n            _this.setVisibility(true);\r\n\r\n            _youtubePlayer = new _youtubeAPI.Player(_element, ytConfig);\r\n            _element = _youtubePlayer.getIframe();\r\n\r\n            _youtubeEmbedReadyCallback = null;\r\n        }\r\n\r\n        // Youtube Player Event Handlers\r\n        function _onYoutubePlayerReady() {\r\n            // If setItem was called before the player was ready, update the player now\r\n            if (_youtubePlayerReadyCallback) {\r\n                _youtubePlayerReadyCallback.apply(_this);\r\n                _youtubePlayerReadyCallback = null;\r\n            }\r\n        }\r\n\r\n        function _onYoutubeStateChange(event) {\r\n            var youtubeStates = _youtubeAPI.PlayerState;\r\n            _youtubeState = event.data;\r\n\r\n            switch (_youtubeState) {\r\n\r\n                case youtubeStates.UNSTARTED: // -1: //unstarted\r\n                    return;\r\n\r\n                case youtubeStates.ENDED: // 0: //ended (idle after playback)\r\n                    _ended();\r\n                    return;\r\n\r\n                case youtubeStates.PLAYING: // 1: playing\r\n\r\n                    //prevent duplicate captions when using JW Player captions and YT video has yt:cc=on\r\n                    if (_.isFunction(_youtubePlayer.unloadModule)) {\r\n                        _youtubePlayer.unloadModule('captions');\r\n                    }\r\n\r\n                    // playback has started so stop blocking api.play()\r\n                    _requiresUserInteraction = false;\r\n\r\n                    // sent meta size and duration\r\n                    _sendMetaEvent();\r\n\r\n                    // send levels when playback starts\r\n                    _this.trigger(events.JWPLAYER_MEDIA_LEVELS, {\r\n                        levels: _this.getQualityLevels(),\r\n                        currentQuality: _this.getCurrentQuality()\r\n                    });\r\n\r\n                    _this.setState(states.PLAYING);\r\n                    return;\r\n\r\n                case youtubeStates.PAUSED: // 2: //paused\r\n                    _this.setState(states.PAUSED);\r\n                    return;\r\n\r\n                case youtubeStates.BUFFERING: // 3: //buffering\r\n                    if (_this.seeking) {\r\n                        _this.setState(states.LOADING);\r\n                    } else {\r\n                        _this.setState(states.STALLED);\r\n                    }\r\n                    return;\r\n\r\n                case youtubeStates.CUED: // 5: //video cued (idle before playback)\r\n                    _this.setState(states.IDLE);\r\n                    return;\r\n            }\r\n        }\r\n\r\n        function _onYoutubePlaybackQualityChange() {\r\n            // This event is where the Youtube player and media is actually ready and can be played\r\n\r\n            // make sure playback starts/resumes\r\n            if (_youtubeState !== _youtubeAPI.PlayerState.ENDED) {\r\n                _this.play();\r\n            }\r\n\r\n            _this.trigger(events.JWPLAYER_MEDIA_LEVEL_CHANGED, {\r\n                currentQuality: _this.getCurrentQuality(),\r\n                levels: _this.getQualityLevels()\r\n            });\r\n        }\r\n\r\n        function _onYoutubePlayerError() {\r\n            _this.trigger(events.JWPLAYER_MEDIA_ERROR, {\r\n                message: 'Error loading YouTube: Video could not be played'\r\n            });\r\n        }\r\n\r\n        function _readyViewForMobile() {\r\n            if (_isMobile) {\r\n                _this.setVisibility(true);\r\n            }\r\n        }\r\n        // Internal operations\r\n\r\n        function _stopVideo() {\r\n            clearInterval(_playingInterval);\r\n            if (_youtubePlayer && _youtubePlayer.stopVideo) {\r\n                utils.tryCatch(function() {\r\n                    _youtubePlayer.stopVideo();\r\n                    _youtubePlayer.clearVideo();\r\n                });\r\n            }\r\n        }\r\n        // Additional Provider Methods (not yet implemented in html5.video)\r\n\r\n        this.init = function(item) {\r\n            // For now, we want each youtube provider to delete and start from scratch\r\n            //this.destroy();\r\n\r\n            // load item on embed for mobile touch to start\r\n            _setItem(item);\r\n        };\r\n\r\n        this.destroy = function() {\r\n            this.remove();\r\n            this.off();\r\n\r\n            _container =\r\n                _element =\r\n                _youtubeAPI =\r\n                _this = null;\r\n        };\r\n\r\n\r\n        // Video Provider API\r\n        this.load = function(item) {\r\n            this.setState(states.LOADING);\r\n\r\n            _setItem(item);\r\n            // start playback if api is ready\r\n            _this.play();\r\n        };\r\n\r\n        function _setItem(item) {\r\n            _youtubePlayerReadyCallback = null;\r\n            var url = item.sources[0].file;\r\n            var videoId = utils.youTubeID(url);\r\n\r\n            if (!item.image) {\r\n                item.image = '//i.ytimg.com/vi/' + videoId + '/0.jpg';\r\n            }\r\n\r\n            _this.volume(_playerConfig.volume);\r\n            _this.mute(_playerConfig.mute);\r\n            _this.setVisibility(true);\r\n\r\n            if (!_youtubeAPI || !_youtubePlayer) {\r\n                // wait for API to be present and jwplayer DOM to be instantiated\r\n                _youtubeEmbedReadyCallback = function() {\r\n                    _embedYoutubePlayer(videoId);\r\n                };\r\n                // make sure _youtubeAPI is set before running readyCheck\r\n                _onLoadSuccess();\r\n                return;\r\n            }\r\n\r\n            if (!_youtubePlayer.getPlayerState) {\r\n                var onStart = function() {\r\n                    _this.load(item);\r\n                };\r\n                if (_youtubePlayerReadyCallback) {\r\n                    _youtubePlayerReadyCallback = _composeCallbacks(onStart, _youtubePlayerReadyCallback);\r\n                } else {\r\n                    _youtubePlayerReadyCallback = onStart;\r\n                }\r\n                return;\r\n            }\r\n\r\n            var currentVideoId = _youtubePlayer.getVideoData().video_id;\r\n\r\n            if (currentVideoId !== videoId) {\r\n                // An exception is thrown by the iframe_api - but the call works\r\n                // it's trying to access an element of the controls which is not present\r\n                // because we disabled control in the setup\r\n                if (_requiresUserInteraction) {\r\n                    _stopVideo();\r\n                    _youtubePlayer.cueVideoById(videoId);\r\n                } else {\r\n                    _youtubePlayer.loadVideoById(videoId);\r\n                }\r\n\r\n                // if player is unstarted, ready for mobile\r\n                var youtubeState = _youtubePlayer.getPlayerState();\r\n                var youtubeStates = _youtubeAPI.PlayerState;\r\n                if (youtubeState === youtubeStates.UNSTARTED || youtubeState === youtubeStates.CUED) {\r\n                    _readyViewForMobile();\r\n                }\r\n            } else {\r\n                // replay current video\r\n                if (_youtubePlayer.getCurrentTime() > 0) {\r\n                    _youtubePlayer.seekTo(0);\r\n                }\r\n                _sendMetaEvent();\r\n            }\r\n        }\r\n\r\n\r\n        this.stop = function() {\r\n            _stopVideo();\r\n            this.setState(states.IDLE);\r\n        };\r\n\r\n        this.play = function() {\r\n            if (_requiresUserInteraction) {\r\n                return;\r\n            }\r\n            if (_youtubePlayer && _youtubePlayer.playVideo) {\r\n                _youtubePlayer.playVideo();\r\n            } else {    // If the _youtubePlayer isn't setup, then play when we're ready\r\n                if (_youtubePlayerReadyCallback) {\r\n                    _youtubePlayerReadyCallback = _composeCallbacks(this.play, _youtubePlayerReadyCallback);\r\n                } else {\r\n                    _youtubePlayerReadyCallback = this.play;\r\n                }\r\n            }\r\n        };\r\n\r\n        this.pause = function() {\r\n            if (_requiresUserInteraction) {\r\n                return;\r\n            }\r\n            if (_youtubePlayer.pauseVideo) {\r\n                _youtubePlayer.pauseVideo();\r\n            }\r\n        };\r\n\r\n        this.seek = function(position) {\r\n            if (_requiresUserInteraction) {\r\n                return;\r\n            }\r\n            if (_youtubePlayer.seekTo) {\r\n                this.seeking = true;\r\n                _youtubePlayer.seekTo(position);\r\n            }\r\n        };\r\n\r\n        this.volume = function(vol) {\r\n            if (!_.isNumber(vol)) {\r\n                return;\r\n            }\r\n            var volume = Math.min(Math.max(0, vol), 100);\r\n            if (_youtubePlayer && _youtubePlayer.getVolume) {\r\n                _youtubePlayer.setVolume(volume);\r\n            }\r\n\r\n        };\r\n\r\n        this.mute = function(mute) {\r\n            var muted = utils.exists(mute) ? !!mute : !_playerConfig.mute;\r\n            if (_youtubePlayer  && _youtubePlayer.mute) {\r\n                if (muted) {\r\n                    _youtubePlayer.mute();\r\n                } else {\r\n                    _youtubePlayer.unMute();\r\n                }\r\n            }\r\n        };\r\n\r\n        this.detachMedia = function() {\r\n            return null;\r\n        };\r\n\r\n        this.attachMedia = function() {\r\n            if (_beforecompleted) {\r\n                this.setState(states.COMPLETE);\r\n                this.trigger(events.JWPLAYER_MEDIA_COMPLETE);\r\n                _beforecompleted = false;\r\n            }\r\n        };\r\n\r\n        this.setContainer = function(parent) {\r\n            _container = parent;\r\n            parent.appendChild(_element);\r\n            this.setVisibility(true);\r\n        };\r\n\r\n        this.getContainer = function() {\r\n            return _container;\r\n        };\r\n\r\n        this.remove = function() {\r\n            _stopVideo();\r\n\r\n            // remove element\r\n            if (_element && _container && _container === _element.parentNode) {\r\n                _container.removeChild(_element);\r\n            }\r\n\r\n            _youtubeEmbedReadyCallback =\r\n                _youtubePlayerReadyCallback =\r\n                    _youtubePlayer = null;\r\n        };\r\n\r\n        this.setVisibility = function(state) {\r\n            state = !!state;\r\n            if (state) {\r\n                // show\r\n                cssUtils.style(_element, {\r\n                    display: 'block'\r\n                });\r\n                cssUtils.style(_container, {\r\n                    visibility: 'visible',\r\n                    opacity: 1\r\n                });\r\n            } else {\r\n                // hide\r\n                if (!_isMobile) {\r\n                    cssUtils.style(_container, {\r\n                        opacity: 0\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        this.resize = function(width, height, stretching) {\r\n            return stretchUtils.stretch(stretching,\r\n                _element,\r\n                width, height,\r\n                _element.clientWidth, _element.clientHeight);\r\n        };\r\n\r\n        this.checkComplete = function() {\r\n            return _beforecompleted;\r\n        };\r\n\r\n        this.getCurrentQuality = function() {\r\n            if (!_youtubePlayer) {\r\n                return -1;\r\n            }\r\n            if (_youtubePlayer.getAvailableQualityLevels) {\r\n                var ytQuality = _youtubePlayer.getPlaybackQuality();\r\n                var ytLevels = _youtubePlayer.getAvailableQualityLevels();\r\n                return ytLevels.indexOf(ytQuality);\r\n            }\r\n            return -1;\r\n        };\r\n\r\n        this.getQualityLevels = function() {\r\n            if (!_youtubePlayer) {\r\n                return;\r\n            }\r\n\r\n            if (!_.isFunction(_youtubePlayer.getAvailableQualityLevels)) {\r\n                return [];\r\n            }\r\n\r\n            var ytLevels = _youtubePlayer.getAvailableQualityLevels();\r\n\r\n            // If the result is ['auto', 'low'], we prefer to return ['low']\r\n            if (ytLevels.length === 2 && _.contains(ytLevels, 'auto')) {\r\n                return {\r\n                    label : _.without(ytLevels, 'auto')\r\n                };\r\n            }\r\n\r\n            var qualityArray = _.map(ytLevels, function(val) {\r\n                return {\r\n                    label : val\r\n                };\r\n            });\r\n\r\n            // We expect them in decreasing order\r\n            return qualityArray.reverse();\r\n        };\r\n\r\n        this.setCurrentQuality = function(quality) {\r\n            if (!_youtubePlayer) {\r\n                return;\r\n            }\r\n            if (_youtubePlayer.getAvailableQualityLevels) {\r\n                var ytLevels = _youtubePlayer.getAvailableQualityLevels();\r\n                if (ytLevels.length) {\r\n                    var ytQuality = ytLevels[ytLevels.length - quality - 1];\r\n                    _youtubePlayer.setPlaybackQuality(ytQuality);\r\n                }\r\n            }\r\n        };\r\n\r\n        this.getName = function() {\r\n            return { name: 'youtube' };\r\n        };\r\n    }\r\n\r\n    YoutubeProvider.getName = function() {\r\n        return { name: 'youtube' };\r\n    };\r\n\r\n    return {\r\n        register : function(jwplayer) {\r\n            jwplayer.api.registerProvider(YoutubeProvider);\r\n        }\r\n    };\r\n\r\n});\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/js/providers/youtube.js\n ** module id = 97\n ** module chunks = 3\n **/"],"mappingssourceRoot":""}